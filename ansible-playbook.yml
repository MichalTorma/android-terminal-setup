---
- name: Setup Complete Development Environment for Android Terminal
  hosts: localhost
  become: yes
  gather_facts: yes
  
  vars:
    ssh_port: 2222
    ssh_config_file: /etc/ssh/sshd_config
    ssh_backup_file: /etc/ssh/sshd_config.backup
    ssh_log_file: /var/log/ssh.log
    ssh_startup_script: /usr/local/bin/start-ssh.sh
    systemd_service_file: /etc/systemd/system/android-ssh.service
    
    # Kubernetes/Minikube settings
    minikube_version: "1.32.0"
    kubectl_version: "1.29.0"
    docker_version: "24.0.7"
    
    # ArgoCD settings
    argocd_namespace: "argocd"
    argocd_version: "2.9.0"
    
  pre_tasks:
    - name: Display system information
      debug:
        msg: |
          ========================================
          System Information
          ========================================
          System: {{ ansible_system }}
          Distribution: {{ ansible_distribution }}
          Version: {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          Kernel: {{ ansible_kernel }}
          ========================================
      
    - name: Check if running on Debian-based system
      fail:
        msg: "This playbook is designed for Debian-based systems only (including Android Terminal)"
      when: ansible_distribution not in ["Debian", "Ubuntu"]
        
    - name: Ensure required packages are installed
      apt:
        name:
          - openssh-server
          - curl
          - net-tools
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - software-properties-common
          - wget
          - unzip
          - jq
        state: present
        update_cache: yes
      
  tasks:
    # SSH Setup Tasks
    - name: Backup existing SSH configuration
      copy:
        src: "{{ ssh_config_file }}"
        dest: "{{ ssh_backup_file }}"
        remote_src: yes
        backup: yes
      ignore_errors: yes
      
    - name: Generate random password for root user
      set_fact:
        root_password: "{{ lookup('password', '/dev/null length=12 chars=ascii_letters,digits') }}"
        
    - name: Set root password
      user:
        name: root
        password: "{{ root_password | password_hash('sha512') }}"
        
    - name: Create hardened SSH configuration
      template:
        src: sshd_config.j2
        dest: "{{ ssh_config_file }}"
        owner: root
        group: root
        mode: '0600'
        backup: yes
      notify: restart ssh
        
    - name: Create SSH startup script
      template:
        src: start-ssh.sh.j2
        dest: "{{ ssh_startup_script }}"
        owner: root
        group: root
        mode: '0755'
        
    - name: Create systemd service file (if systemd is available)
      template:
        src: android-ssh.service.j2
        dest: "{{ systemd_service_file }}"
        owner: root
        group: root
        mode: '0644'
      when: ansible_service_mgr == "systemd"
      notify: reload systemd
      
    - name: Create SSH log file
      file:
        path: "{{ ssh_log_file }}"
        state: touch
        owner: root
        group: root
        mode: '0644'
        
    - name: Ensure SSH directories have correct permissions
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - /etc/ssh
        - /var/run/sshd
        - /usr/local/bin
        
    # Docker Installation
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      
    - name: Add current user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      
    # Kubectl Installation
    - name: Download kubectl
      get_url:
        url: "https://dl.k8s.io/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
      
    - name: Verify kubectl installation
      command: kubectl version --client
      register: kubectl_version_output
      
    # Minikube Installation
    - name: Download Minikube
      get_url:
        url: "https://github.com/kubernetes/minikube/releases/download/v{{ minikube_version }}/minikube-linux-amd64"
        dest: /usr/local/bin/minikube
        mode: '0755'
      
    - name: Verify Minikube installation
      command: minikube version
      register: minikube_version_output
      
    # Start Minikube
    - name: Start Minikube cluster
      command: minikube start --driver=docker --force
      register: minikube_start_output
      changed_when: "'Starting' in minikube_start_output.stdout or 'Starting' in minikube_start_output.stderr"
      
    - name: Enable Minikube addons
      command: "minikube addons enable {{ item }}"
      loop:
        - ingress
        - dashboard
        - metrics-server
      register: minikube_addons_output
      
    # Install ArgoCD
    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ argocd_namespace }}"
      
    - name: Install ArgoCD
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/argoproj/argo-cd/v{{ argocd_version }}/manifests/install.yaml
      
    - name: Wait for ArgoCD pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ argocd_namespace }}"
        label_selectors:
          - app.kubernetes.io/name=argocd-server
      register: argocd_pods
      until: argocd_pods.resources | length > 0 and argocd_pods.resources[0].status.phase == 'Running'
      retries: 30
      delay: 10
      
    - name: Get ArgoCD admin password
      command: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      register: argocd_password
      
    - name: Get Minikube IP
      command: minikube ip
      register: minikube_ip_output
      
    - name: Get device IP address
      set_fact:
        device_ip: "{{ ansible_default_ipv4.address }}"
        
    - name: Display network information
      debug:
        msg: |
          ========================================
          Network Information
          ========================================
          Primary Interface: {{ ansible_default_ipv4.interface }}
          Container IP: {{ ansible_default_ipv4.address }}
          Container Network: {{ ansible_default_ipv4.network }}
          
          All Network Interfaces:
          {% for interface in ansible_interfaces %}
          {% if hostvars[inventory_hostname]['ansible_' + interface.replace('-', '_')] is defined %}
          {% if hostvars[inventory_hostname]['ansible_' + interface.replace('-', '_')]['ipv4'] is defined %}
          - {{ interface }}: {{ hostvars[inventory_hostname]['ansible_' + interface.replace('-', '_')]['ipv4']['address'] }}
          {% endif %}
          {% endif %}
          {% endfor %}
          
          Note: Your Android Terminal uses a virtual network interface (like enp0s8).
          Use port forwarding for reliable external access:
          adb forward tcp:2222 tcp:2222
          ========================================
         
    - name: Display installation summary
      debug:
        msg: |
          ========================================
          Complete Development Environment Setup Complete!
          ========================================
          
          📱 Device IP: {{ device_ip }}
          🔑 Root Password: {{ root_password }}
          🚪 SSH Port: {{ ssh_port }}
          
          🐳 Docker: Installed and running
          ☸️  Kubernetes: Minikube cluster running
          🚀 ArgoCD: Installed and ready
          
          🚀 To start SSH server:
          - Interactive: {{ ssh_startup_script }}
          - Background: nohup {{ ssh_startup_script }} > {{ ssh_log_file }} 2>&1 &
          - Systemd: systemctl start android-ssh (if available)
          
          🔗 Connect from another device:
          ssh root@{{ device_ip }} -p {{ ssh_port }}
          
          📋 Logs: {{ ssh_log_file }}
          ⚙️  Config: {{ ssh_config_file }}
          
          ☸️  Kubernetes Access:
          - Minikube IP: {{ minikube_ip_output.stdout }}
          - kubectl: kubectl get pods --all-namespaces
          - Dashboard: minikube dashboard
          
          🚀 ArgoCD Access:
          - Admin Password: {{ argocd_password.stdout }}
          - Port Forward: kubectl port-forward -n argocd svc/argocd-server 8080:443
          - Web UI: https://localhost:8080 (admin / {{ argocd_password.stdout }})
          
          ⚠️  IMPORTANT: Change the root password after first login!
          ========================================
          
  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted
      ignore_errors: yes
        
    - name: reload systemd
      systemd:
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"
