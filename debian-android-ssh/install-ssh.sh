#!/bin/bash

# debian-android-ssh installer
# One-liner installer for OpenSSH server in Android 16 Debian terminal
# Version: 1.0.0

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Check if we're in a Debian environment
check_debian() {
    if [[ ! -f /etc/debian_version ]]; then
        error "This script is designed for Debian-based systems"
        exit 1
    fi
}

# Check if SSH is already installed and running
check_existing_ssh() {
    if command -v sshd >/dev/null 2>&1; then
        if pgrep -x "sshd" >/dev/null; then
            warn "SSH server is already running"
            read -p "Do you want to continue with reconfiguration? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log "Installation cancelled"
                exit 0
            fi
        fi
    fi
}

# Generate random password
generate_password() {
    tr -dc 'A-Za-z0-9!@#$%^&*' < /dev/urandom | head -c 12
}

# Get Android device IP
get_device_ip() {
    # Try multiple methods to get IP
    local ip=""
    
    # Method 1: Check wlan0 interface
    if ip link show wlan0 >/dev/null 2>&1; then
        ip=$(ip addr show wlan0 | grep -oP 'inet \K\S+' | head -1)
    fi
    
    # Method 2: Check eth0 interface
    if [[ -z "$ip" ]] && ip link show eth0 >/dev/null 2>&1; then
        ip=$(ip addr show eth0 | grep -oP 'inet \K\S+' | head -1)
    fi
    
    # Method 3: Check any interface
    if [[ -z "$ip" ]]; then
        ip=$(ip route get 8.8.8.8 | grep -oP 'src \K\S+' | head -1)
    fi
    
    echo "$ip"
}

# Main installation function
main() {
    log "üöÄ debian-android-ssh installer starting..."
    log "Target: Android 16 Debian terminal/container"
    
    # Pre-flight checks
    check_root
    check_debian
    check_existing_ssh
    
    # Update package list
    log "üì¶ Updating package list..."
    apt-get update -y || {
        error "Failed to update package list"
        exit 1
    }
    
    # Install OpenSSH server
    log "üì¶ Installing OpenSSH server..."
    apt-get install -y openssh-server || {
        error "Failed to install OpenSSH server"
        exit 1
    }
    
    # Create SSH directory
    log "üìÅ Setting up SSH directory..."
    mkdir -p /var/run/sshd
    chmod 755 /var/run/sshd
    
    # Generate SSH host keys if they don't exist
    log "üîë Generating SSH host keys..."
    if [[ ! -f /etc/ssh/ssh_host_rsa_key ]]; then
        ssh-keygen -A || {
            error "Failed to generate SSH host keys"
            exit 1
        }
    else
        log "SSH host keys already exist, skipping generation"
    fi
    
    # Backup existing config
    if [[ -f /etc/ssh/sshd_config ]]; then
        cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)
        log "Backed up existing SSH config"
    fi
    
    # Create optimized SSH configuration
    log "‚öôÔ∏è  Configuring SSH..."
    cat > /etc/ssh/sshd_config << 'EOF'
# SSH configuration for Android Debian terminal
# Generated by debian-android-ssh installer

# Network
Port 22
Protocol 2
AddressFamily any
ListenAddress 0.0.0.0

# Host keys
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Authentication
PermitRootLogin yes
PasswordAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys
AuthorizedKeysFile2 .ssh/authorized_keys2

# Security settings
PermitEmptyPasswords no
MaxAuthTries 3
MaxSessions 10
ClientAliveInterval 60
ClientAliveCountMax 3

# Logging
SyslogFacility AUTH
LogLevel INFO

# Features
X11Forwarding no
AllowTcpForwarding yes
GatewayPorts no
PermitTunnel no
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
UseLogin no
UsePrivilegeSeparation yes
PermitUserEnvironment no
Compression delayed
AcceptEnv LANG LC_*

# Subsystem
Subsystem sftp /usr/lib/openssh/sftp-server
EOF
    
    # Set secure permissions
    chmod 600 /etc/ssh/sshd_config
    chown root:root /etc/ssh/sshd_config
    
    # Generate secure random password
    local password=$(generate_password)
    
    # Set root password
    log "üîê Setting root password..."
    echo "root:$password" | chpasswd || {
        error "Failed to set root password"
        exit 1
    }
    
    # Create startup script with better error handling
    log "üìú Creating startup script..."
    cat > /usr/local/bin/start-ssh.sh << 'EOF'
#!/bin/bash
# Start SSH server for Android Debian terminal
# Generated by debian-android-ssh installer

set -e

SSH_LOG="/var/log/ssh.log"
SSH_PID="/var/run/sshd.pid"

# Create log directory
mkdir -p "$(dirname "$SSH_LOG")"

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$SSH_LOG"
}

# Check if SSH is already running
if [[ -f "$SSH_PID" ]] && kill -0 "$(cat "$SSH_PID")" 2>/dev/null; then
    log "SSH server is already running (PID: $(cat "$SSH_PID"))"
    exit 0
fi

# Start SSH server
log "Starting SSH server..."
/usr/sbin/sshd -D -e 2>&1 | tee -a "$SSH_LOG"
EOF
    
    chmod +x /usr/local/bin/start-ssh.sh
    
    # Create systemd service file (if systemd is available)
    if command -v systemctl >/dev/null 2>&1; then
        log "üìã Creating systemd service file..."
        cat > /etc/systemd/system/android-ssh.service << EOF
[Unit]
Description=SSH server for Android Debian terminal
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/start-ssh.sh
Restart=always
RestartSec=3
User=root

[Install]
WantedBy=multi-user.target
EOF
        
        systemctl daemon-reload
        log "Systemd service created (android-ssh.service)"
    fi
    
    # Get device IP
    local device_ip=$(get_device_ip)
    
    # Success message
    echo
    log "‚úÖ OpenSSH server installation complete!"
    echo
    info "üìã Connection Information:"
    echo "   Host: $device_ip"
    echo "   Port: 22"
    echo "   User: root"
    echo "   Password: $password"
    echo
    warn "‚ö†Ô∏è  SECURITY: Change the password immediately after first login!"
    echo
    info "üöÄ Quick Start Commands:"
    echo "   # Start SSH server:"
    echo "   /usr/local/bin/start-ssh.sh"
    echo
    echo "   # Start in background:"
    echo "   nohup /usr/local/bin/start-ssh.sh > /var/log/ssh.log 2>&1 &"
    echo
    echo "   # Connect from another device:"
    echo "   ssh root@$device_ip"
    echo
    if command -v systemctl >/dev/null 2>&1; then
        echo "   # Using systemd (if available):"
        echo "   systemctl start android-ssh"
        echo "   systemctl enable android-ssh"
        echo
    fi
    info "üîç Status Commands:"
    echo "   # Check if SSH is running:"
    echo "   ps aux | grep sshd"
    echo
    echo "   # View SSH logs:"
    echo "   tail -f /var/log/ssh.log"
    echo
    info "üîß Configuration:"
    echo "   SSH config: /etc/ssh/sshd_config"
    echo "   Startup script: /usr/local/bin/start-ssh.sh"
    echo "   Log file: /var/log/ssh.log"
    echo
    log "üéâ Installation completed successfully!"
}

# Run main function
main "$@"
