#!/bin/bash
# SSH Server Startup Script for Android Debian Container
# Generated by Ansible - {{ ansible_date_time.iso8601 }}

set -e

# Configuration
SSH_CONFIG="{{ ssh_config_file }}"
SSH_LOG="{{ ssh_log_file }}"
SSH_PORT="{{ ssh_port }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$SSH_LOG"
}

# Check if SSH is already running
check_ssh_running() {
    if pgrep -f "sshd.*$SSH_CONFIG" > /dev/null; then
        return 0
    else
        return 1
    fi
}

# Stop existing SSH processes
stop_ssh() {
    log "Stopping existing SSH processes..."
    pkill -f "sshd.*$SSH_CONFIG" || true
    sleep 2
}

# Start SSH server
start_ssh() {
    log "Starting SSH server on port $SSH_PORT..."
    
    # Test configuration first
    if ! sshd -t -f "$SSH_CONFIG"; then
        log "ERROR: SSH configuration test failed!"
        exit 1
    fi
    
    # Start SSH server
    if sshd -f "$SSH_CONFIG" -D -e; then
        log "SSH server started successfully"
    else
        log "ERROR: Failed to start SSH server"
        exit 1
    fi
}

# Main execution
main() {
    log "=== SSH Server Startup ==="
    
    # Check if config file exists
    if [ ! -f "$SSH_CONFIG" ]; then
        log "ERROR: SSH config file not found: $SSH_CONFIG"
        exit 1
    fi
    
    # Check if we can bind to the port
    if netstat -tlnp 2>/dev/null | grep -q ":$SSH_PORT "; then
        log "WARNING: Port $SSH_PORT is already in use"
    fi
    
    # Stop existing SSH if running
    if check_ssh_running; then
        log "SSH server is already running, stopping it first..."
        stop_ssh
    fi
    
    # Start SSH server
    start_ssh
}

# Handle signals
trap 'log "SSH server stopped by signal"; exit 0' SIGTERM SIGINT

# Run main function
main "$@"
